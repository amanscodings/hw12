class DisjointSet:
   def __init__(self, n):
       self.parent = [i for i in range(n)]
       self.rank = [0] * n
   def find(self, x):
       if self.parent[x] != x:
           self.parent[x] = self.find(self.parent[x])
       return self.parent[x]
   def union(self, x, y):
       x_root, y_root = self.find(x), self.find(y)
       if x_root == y_root:
           return False
       if self.rank[x_root] < self.rank[y_root]:
           self.parent[x_root] = y_root
       elif self.rank[x_root] > self.rank[y_root]:
           self.parent[y_root] = x_root
       else:
           self.parent[y_root] = x_root
           self.rank[x_root] += 1
       return True
def minCostToSupplyWater(n, wells, pipes):
   costs = []
   for i, cost in enumerate(wells):
       costs.append((cost, 0, i + 1))  
   for house1, house2, cost in pipes:
       costs.append((cost, house1, house2))
   costs.sort() 
   total_cost = 0
   dsu = DisjointSet(n + 1)  
   for cost, house1, house2 in costs:
       if dsu.union(house1, house2):  
           total_cost += cost
   return total_cost

n = 3
wells = [1, 2, 2]
pipes = [[1, 2, 1], [2, 3, 1]]
print(minCostToSupplyWater(n, wells, pipes)) 
print("Minimum total cost to supply water to all houses:")
